const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function setupDatabase() {
  console.log('üöÄ Configuration de la base de donn√©es Supabase...\n')

  try {
    // Lire le fichier SQL de migration
    const migrationSQL = fs.readFileSync('./supabase/migrations/20251014_initial_schema.sql', 'utf8')
    
    console.log('üìù Ex√©cution de la migration SQL...')
    
    // Ex√©cuter le SQL
    const { data, error } = await supabase.rpc('exec_sql', { sql: migrationSQL })
    
    if (error) {
      // Si la fonction exec_sql n'existe pas, on essaie une autre approche
      console.log('‚ö†Ô∏è  M√©thode RPC non disponible, utilisation de l\'approche alternative...')
      
      // Diviser le SQL en commandes individuelles
      const commands = migrationSQL
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0)
      
      for (const command of commands) {
        const { error: cmdError } = await supabase.rpc('exec', { sql: command })
        if (cmdError) {
          console.error('‚ùå Erreur lors de l\'ex√©cution de la commande:', cmdError.message)
        }
      }
    }
    
    console.log('‚úÖ Migration SQL ex√©cut√©e avec succ√®s !')
    
    // V√©rifier que les tables ont √©t√© cr√©√©es
    console.log('\nüîç V√©rification des tables cr√©√©es...')
    
    const tables = ['profiles', 'bilans', 'tests', 'documents', 'messages', 'resources', 'activites']
    
    for (const table of tables) {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true })
      
      if (error) {
        console.log(`‚ùå Table ${table}: Non trouv√©e`)
      } else {
        console.log(`‚úÖ Table ${table}: OK (${count} enregistrements)`)
      }
    }
    
    console.log('\nüéâ Base de donn√©es configur√©e avec succ√®s !')
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message)
    process.exit(1)
  }
}

setupDatabase()
